{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","action","query","status","defaultState","filterReducer","state","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectTodo","isSelected","id","filteredTodos","allTodos","queryToLowerCase","toLowerCase","completed","title","includes","length","className","map","cn","onClick","currentActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","Error","userId","useEffect","getUser","catch","href","email","name","App","isLoading","setIsLoading","todosFromServer","todoActions","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85cbdcb4.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  todo: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return todo;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst defaultState: State = {\n  query: '',\n  status: 'all',\n};\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst filterReducer = (state: State = defaultState, action: Action): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodoAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: SetTodoAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\n\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectTodo = useAppSelector(state => state.currentTodo);\n  const isSelected = (id: number) => selectTodo?.id === id;\n\n  const filteredTodos = useAppSelector(({ filter, todos }) => {\n    const allTodos: Todo[] = todos;\n    const queryToLowerCase = filter.query.toLowerCase();\n\n    return allTodos.filter(todo => {\n      switch (filter.status) {\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        case 'all':\n        default:\n          return todo;\n      }\n    })\n      .filter(todo => todo.title.toLowerCase().includes(queryToLowerCase));\n  });\n\n  if (filteredTodos.length === 0) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredTodos.map(todo => {\n            const { id, title, completed } = todo;\n\n            return (\n              <tr\n                key={id}\n                data-cy=\"todo\"\n                className={cn({\n                  'has-background-info-light': isSelected(id),\n                })}\n              >\n                <td className=\"is-vcentered\">{id}</td>\n\n                <td className=\"is-vcentered\">\n                  {completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={cn({\n                      'has-text-danger': !completed,\n                      'has-text-success': completed,\n                    })}\n                  >\n                    {title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(\n                      currentActions.setTodo(todo),\n                    )}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={cn('far', {\n                          'fa-eye': !isSelected(id),\n                          'fa-eye-slash': isSelected(id),\n                        })}\n                      />\n                    </span>\n                  </button>\n                </td>\n\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleTodoStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleClearQuery = () => dispatch(filterActions.setQuery(''));\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleTodoStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentActions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n\n  if (!todo) {\n    throw new Error('Can`t find todo');\n  }\n\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  useEffect(() => {\n    getUser(userId)\n      .then(setUser)\n      .catch(() => {\n        throw new Error('Can`t find user');\n      });\n  }, [todo]);\n\n  const removeTodo = () => dispatch(currentActions.removeTodo());\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={cn({\n                'has-text-success': completed,\n                'has-text-danger': !completed,\n              })}\n              >\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todoActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const isSelected = currentTodo !== null;\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(todosFromServer => dispatch(todoActions.setTodos(todosFromServer)))\n      .catch(() => {\n        throw new Error('Can`t find todos');\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? <Loader /> : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isSelected && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}